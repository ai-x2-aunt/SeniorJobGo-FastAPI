# 사전 정의 - 변환 규칙을 명확하게 정의
DICTIONARY = {
    '고령': '장년',
    '노령': '장년',
    '시니어': '장년',
    '고령자': '장년',
    '노인': '장년',
    '나이 많은': '장년',
    '직장인': '구직자'
}

# 대한민국의 시도 및 시군구 목록
LOCATIONS = [
    # 서울특별시
    "서울", "종로구", "중구", "용산구", "성동구", "광진구", "동대문구", "중랑구", "성북구", "강북구",
    "도봉구", "노원구", "은평구", "서대문구", "마포구", "양천구", "강서구", "구로구", "금천구",
    "영등포구", "동작구", "관악구", "서초구", "강남구", "송파구", "강동구",

    # 부산광역시
    "부산", "중구", "서구", "동구", "영도구", "부산진구", "동래구", "남구", "북구", "해운대구",
    "사하구", "금정구", "강서구", "연제구", "수영구", "사상구", "기장군",

    # 대구광역시
    "대구", "중구", "동구", "서구", "남구", "북구", "수성구", "달서구", "달성군",

    # 인천광역시
    "인천", "중구", "동구", "미추홀구", "연수구", "남동구", "부평구", "계양구", "서구", "강화군", "옹진군",

    # 광주광역시
    "광주", "동구", "서구", "남구", "북구", "광산구",

    # 대전광역시
    "대전", "동구", "중구", "서구", "유성구", "대덕구",

    # 울산광역시
    "울산", "중구", "남구", "동구", "북구", "울주군",

    # 세종특별자치시
    "세종",

    # 경기도
    "경기", "수원시", "성남시", "고양시", "용인시", "부천시", "안산시", "안양시", "남양주시", "화성시",
    "평택시", "의정부시", "시흥시", "파주시", "광명시", "김포시", "군포시", "광주시", "이천시", "양주시",
    "오산시", "구리시", "안성시", "포천시", "의왕시", "하남시", "여주시", "양평군", "동두천시", "가평군", "연천군",

    # 강원특별자치도
    "강원", "춘천시", "원주시", "강릉시", "동해시", "태백시", "속초시", "삼척시", "홍천군", "횡성군",
    "영월군", "평창군", "정선군", "철원군", "화천군", "양구군", "인제군", "고성군", "양양군",

    # 충청북도
    "충북", "청주시", "충주시", "제천시", "보은군", "옥천군", "영동군", "증평군", "진천군", "괴산군",
    "음성군", "단양군",

    # 충청남도
    "충남", "천안시", "공주시", "보령시", "아산시", "서산시", "논산시", "계룡시", "당진시", "금산군",
    "부여군", "서천군", "청양군", "홍성군", "예산군", "태안군",

    # 전라북도
    "전북", "전주시", "군산시", "익산시", "정읍시", "남원시", "김제시", "완주군", "진안군", "무주군",
    "장수군", "임실군", "순창군", "고창군", "부안군",

    # 전라남도
    "전남", "목포시", "여수시", "순천시", "나주시", "광양시", "담양군", "곡성군", "구례군", "고흥군",
    "보성군", "화순군", "장흥군", "강진군", "해남군", "영암군", "무안군", "함평군", "영광군", "장성군",
    "완도군", "진도군", "신안군",

    # 경상북도
    "경북", "포항시", "경주시", "김천시", "안동시", "구미시", "영주시", "영천시", "상주시", "문경시",
    "경산시", "의성군", "청송군", "영양군", "영덕군", "청도군", "고령군", "성주군", "칠곡군", "예천군",
    "봉화군", "울진군", "울릉군",

    # 경상남도
    "경남", "창원시", "진주시", "통영시", "사천시", "김해시", "밀양시", "거제시", "양산시", "의령군",
    "함안군", "창녕군", "고성군", "남해군", "하동군", "산청군", "함양군", "거창군", "합천군",

    # 제주특별자치도
    "제주", "제주시", "서귀포시"
]


# 서울 구별 코드 매핑
SEOUL_DISTRICT_CODES = {
    "강남구": "GN", "강동구": "GD", "강북구": "GB",
    "강서구": "GS", "관악구": "GA", "광진구": "GJ",
    "구로구": "GR", "금천구": "GC", "노원구": "NW",
    "도봉구": "DB", "동대문구": "DD", "동작구": "DJ",
    "마포구": "MP", "서대문구": "SD", "서초구": "SC",
    "성동구": "SD", "성북구": "SB", "송파구": "SP",
    "양천구": "YC", "영등포구": "YD", "용산구": "YS",
    "은평구": "EP", "종로구": "JR", "중구": "JG",
    "중랑구": "JL"
}

# 시/도 코드 매핑
AREA_CODES = {
    "서울": "11", "경기": "41", "인천": "28",
    "부산": "26", "대구": "27", "광주": "29",
    "대전": "30", "울산": "31", "세종": "36",
    "강원": "42", "충북": "43", "충남": "44",
    "전북": "45", "전남": "46", "경북": "47",
    "경남": "48", "제주": "50"
}

# NCS 코드 매핑
INTEREST_NCS_MAPPING = {
    "사무행정": {
        "ncs1": "02",  # 경영·회계·사무
        "ncs2": "02",  # 총무·인사
        "keywords": ["사무", "행정", "총무", "인사"]
    },
    "IT/컴퓨터": {
        "ncs1": "02",  # 경영·회계·사무
        "ncs2": "02",  # 사무행정
        "keywords": ["IT", "컴퓨터", "프로그래밍", "개발", "엑셀", "파워포인트", "한글"]
    },
    "요양보호": {
        "ncs1": "06",  # 보건·의료
        "ncs2": "02",  # 보건
        "keywords": ["요양", "간호", "보호", "복지"]
    },
    "조리/외식": {
        "ncs1": "13",  # 음식서비스
        "ncs2": "01",  # 조리
        "keywords": ["조리", "요리", "외식", "주방"]
    },
    "운전/운송": {
        "ncs1": "09",  # 운전·운송
        "ncs2": "02",  # 운전·운송
        "keywords": ["운전", "운송", "배송", "택배"]
    },
    "생산/제조": {
        "ncs1": "15",  # 기계
        "ncs2": "01",  # 기계설계
        "keywords": ["생산", "제조", "조립", "가공"]
    },
    "판매/영업": {
        "ncs1": "02",  # 경영·회계·사무
        "ncs2": "03",  # 재무·회계
        "keywords": ["판매", "영업", "마케팅", "고객"]
    },
    "건물관리": {
        "ncs1": "12",  # 건설
        "ncs2": "03",  # 건축
        "keywords": ["건물", "시설", "관리", "청소"]
    },
    "경비": {
        "ncs1": "11",  # 경비·청소
        "ncs2": "01",  # 경비
        "keywords": ["경비", "보안", "순찰", "감시"]
    }
}

import csv
import os

# 직업 유의어 사전 로드 함수
def load_job_synonyms():
    job_synonyms = {}
    csv_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                           'documents', 'job_dic(UTF-8).csv')
    
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # 헤더 스킵
            next(reader)  # 빈 줄 스킵
            
            for row in reader:
                if len(row) >= 10:  # 최소 필요한 컬럼 수 체크
                    job_name = row[8].strip()  # 직업명
                    related_jobs = row[9].strip()  # 관련직업
                    similar_jobs = row[10].strip()  # 유사직업명칭
                    
                    if job_name:  # 직업명이 있는 경우만 처리
                        synonyms = set()
                        synonyms.add(job_name)
                        
                        # 관련직업 추가
                        if related_jobs:
                            for job in related_jobs.split(','):
                                synonyms.add(job.strip())
                                
                        # 유사직업명칭 추가
                        if similar_jobs:
                            for job in similar_jobs.split(','):
                                synonyms.add(job.strip())
                                
                        # 각 직업명을 키로 하여 모든 유의어를 값으로 저장
                        for syn in synonyms:
                            if syn:  # 빈 문자열이 아닌 경우만
                                if syn in job_synonyms:
                                    job_synonyms[syn].update(synonyms - {syn})
                                else:
                                    job_synonyms[syn] = synonyms - {syn}
                                    
    except Exception as e:
        print(f"직업 사전 로드 중 오류: {str(e)}")
        return {}
        
    return job_synonyms

# 직업 유의어 사전 초기화
JOB_SYNONYMS = load_job_synonyms()

# 직업 유의어 찾기 함수
def get_job_synonyms(job_name: str) -> set:
    """
    주어진 직업명의 유의어를 반환합니다.
    
    Args:
        job_name: 찾을 직업명
        
    Returns:
        set: 유의어 집합 (찾지 못한 경우 빈 집합)
    """
    return JOB_SYNONYMS.get(job_name, set()) 